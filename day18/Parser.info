-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_snailfish -> Snail                          (0)
	Snail -> '[' Snail1 ',' Snail1 ']'                 (1)
	Snail1 -> Snail                                    (2)
	Snail1 -> num                                      (3)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'['            { LeftBra }
	']'            { RightBra }
	','            { Comma }
	num            { Number $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_snailfish rule  0
	Snail           rule  1
	Snail1          rules 2, 3

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_snailfish -> . Snail                         (rule 0)

	'['            shift, and enter state 2

	Snail          goto state 3

State 1

	Snail -> . '[' Snail1 ',' Snail1 ']'                (rule 1)

	'['            shift, and enter state 2


State 2

	Snail -> '[' . Snail1 ',' Snail1 ']'                (rule 1)

	'['            shift, and enter state 2
	num            shift, and enter state 6

	Snail          goto state 4
	Snail1         goto state 5

State 3

	%start_snailfish -> Snail .                         (rule 0)

	%eof           accept


State 4

	Snail1 -> Snail .                                   (rule 2)

	']'            reduce using rule 2
	','            reduce using rule 2


State 5

	Snail -> '[' Snail1 . ',' Snail1 ']'                (rule 1)

	','            shift, and enter state 7


State 6

	Snail1 -> num .                                     (rule 3)

	']'            reduce using rule 3
	','            reduce using rule 3


State 7

	Snail -> '[' Snail1 ',' . Snail1 ']'                (rule 1)

	'['            shift, and enter state 2
	num            shift, and enter state 6

	Snail          goto state 4
	Snail1         goto state 8

State 8

	Snail -> '[' Snail1 ',' Snail1 . ']'                (rule 1)

	']'            shift, and enter state 9


State 9

	Snail -> '[' Snail1 ',' Snail1 ']' .                (rule 1)

	']'            reduce using rule 1
	','            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 4
Number of terminals: 4
Number of non-terminals: 3
Number of states: 10
